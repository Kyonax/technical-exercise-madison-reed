#+TITLE: Madison Reed — Technical Exercise (Vue 3)
#+AUTHOR: Cristian D. Moreno \\
#+AUTHOR: Senior Full Stack Web Developer \\
#+AUTHOR: Villavicencio/Colombia | +573022539479 | [[mailto:kyonax.corp@gmail.com][kyonax.corp@gmail.com]] | [[https://www.linkedin.com/in/kyonax/][Linkedin]] | [[https://github.com/Kyonax][Github]] | [[https://kyonax.github.io][Personal Web]]
#+OPTIONS: toc:t num:t date:nil H:5

This repository contains the implementation of the *Senior Engineer Frontend Code [[file:CHALLENGE.org][Challenge]]* for Madison Reed.

The project was developed using *Vue 3 + TypeScript*, with *SASS* and *PostCSS* integration, following a deliberate set of *custom ESLint rules* to simulate strict coding standards. (This Code Guidelines are just for this case scenario check [[file:eslint.config.ts][eslint.config.ts]])

* TABLE OF CONTENTs :toc:
- [[#project-config][PROJECT CONFIG]]
- [[#set-up-instructions][SET-UP INSTRUCTIONs]]
- [[#backlog][BACKLOG]]
  - [[#project-initialization-11-100][PROJECT INITIALIZATION]]
  - [[#styles--architecture-44-100][STYLES & ARCHITECTURE]]
  - [[#core-components-22-100][CORE COMPONENTs]]
  - [[#composables-11-100][COMPOSABLEs]]
  - [[#final-refining-03-0][FINAL REFINING]]
- [[#documentation][DOCUMENTATION]]

* PROJECT CONFIG
Here you can see the whole base configuration used for this specific exercise:

- *Framework:* Vue 3 + TypeScript + Vite
- *Styling:* SASS and PostCSS for cross-browser support
- *Linting:* ESLint with strict custom rules
  - snake_case for variables, functions, and methods
  - kebab-case for filenames
  - leading "_" for private methods
  - Vue and Unicorn plugin integrations
- *Documentation:* Org-mode files for transparency and version tracking

* SET-UP INSTRUCTIONs
The project follows the default steps of (dev/build) for a *Vue 3* project plus the specific linters of the code guidelines in this case.

- Ensure *Node.js 20.x LTS* is installed.
- LocalHost: [[http://localhost:5173/technical-exercise-madison-reed/][app/technical-exercise-madison-reed/]]

#+BEGIN_SRC sh
# INSTALL DEPENDENCIES
npm install

# START DEVELOPMENT SERVER
npm run dev

# RUN LINTER
npm run lint

# BUILD FOR PRODUCTION
npm run build
#+END_SRC

* BACKLOG
Just a TODO List to messure all the backlog in tasks, this is a brain storm list (not refined):

** PROJECT INITIALIZATION [1/1] [100%]
- [X] Base Set-up [5/5]
  - [X] Vue & Vite Set-up (=npm create vue@latest=)
  - [X] ESLint Configuration & Plugins
  - [X] SASS Styling Configuration
  - [X] PostCSS Configuration
  - [X] Vite Configuration

** STYLES & ARCHITECTURE [4/4] [100%]
- [X] Default Styling Set-up [4/4]
  - [X] Creation of Abstracts (variables, mixins)
  - [X] Creation & Implementation of Default Styling (main.scss)
  - [X] Critical Styles for CSS in =index.html=
  - [X] Adding Fonts to Project
- [X] App Structure [4/4]
  - [X] App Landing Structure Template
  - [X] Gallery Component Structure Template
  - [X] Image Gallery Component Structure Template
  - [X] Modal Gallery Component Structure Template
- [X] App Styling [2/2]
  - [X] Style of =App.vue= (intro section, gallery section)
  - [X] Responsive for Style
- [X] Components Styling [2/2]
  - [X] Image Gallery Component Style
    - [X] Base Style
    - [X] Skeleton Image Fallback Style
    - [X] Responsive
  - [X] Modal Gallery Component Style
    - [X] Base Style
    - [X] Skeleton Image Fallback Style
    - [X] Responsive

** CORE COMPONENTs [2/2] [100%]
- [X] Image Gallery Component
- [X] Modal Gallery Component

** COMPOSABLEs [1/1] [100%]
- [X] Lazy Load Intersection Observer

** TODO FINAL REFINING [0/3] [0%]
- [ ] Create a File to handling all the common Typos
- [ ] Refine the Composables
- [ ] Try to implement a better LazyLoad solution (maybe an existing package)

*** TODO MULTIPLE LAZY LOAD [0/6]
- [ ] Types for Lazy Load
  - Defined as `type LazyLoadOptions`
  - Includes: root, rootMargin, threshold, groupKey

- [ ] Types for Observer Entry
  - Defined as `type ObserverEntry`
  - Includes: observer, el_map, ref_count

- [ ] Observer Store Variable
  - `_observer_store = new Map<string, ObserverEntry>()`
  - Manages global shared observers keyed by options

- [ ] Utility: Make Key Function
  - `_make_key(opts?: LazyLoadOptions)`
  - Builds unique string key from rootMargin | threshold | groupKey
  - Ensures consistent store access

- [ ] Composable Setup
  - `use_lazy_load_shared(src: string, opts?: LazyLoadOptions)`
  - Defines `image_src` (reactive) and `image_ref` (DOM ref)
  - Maintains `store_key` reference for cleanup

- [ ] Lifecycle: onMounted
  - Guard for SSR (`typeof window`)
  - Initialize or reuse observer from `_observer_store`
  - Save target dataset (`dataset.lazy_src`)
  - Register setter in `el_map`
  - Observe element with IntersectionObserver

* DOCUMENTATION
  - [[file:CHALLENGE.org][CHALLENGE.org]] → Technical exercise definition
  - [[file:CHANGELOG.org][CHANGELOG.org]] → Commit and version history
